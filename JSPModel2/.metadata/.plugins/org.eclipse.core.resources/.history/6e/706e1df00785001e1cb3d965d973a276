package com.kwak.db.manager;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.spi.DirStateFactory.Result;
import javax.sql.DataSource;

//기존 JDBC프로그램 구현 -> DBMS(오라클)랑 연동작업
//	client의 요청이 있을때마다 DB서버와 연결을 하기 위해서
//	Conntect 객체를 얻어내야했음

//	단점 : 
//		1. Connection 과정은 일정 시간이 소요되는 작업(반복)
//		2. 불필요한 연결에 의한 서버자원 낭비

// 	단점보완 : DBCP(DataBase Connection Pool)
//		여러개의 DBConnection을 하나의 Pool에 모아두고 관리
//		필요할때마다 Pool을 꺼내다 사용하기만 하면 됨(Meta-INF -> context.xml)
//		만약 빌려올수 있는 Connection이 없다면, Connection이 반환될 때 까지
//		클라이언트는 대기상태로 전환
//		사용이 끝난 Connection 객체가 다시 pool로 변환

public class KwakDBManager {
	public static Connection connect(String poolName) throws Exception {
		Context ctx = new InitialContext();//import javax.naming.Context;
		DataSource ds = (DataSource) ctx.lookup("java:comp/env/" + poolName);
		
		return ds.getConnection();
	}
	
	public static void close(Connection con, PreparedStatement pstmt, ResultSet rs) {
		
	}
}
