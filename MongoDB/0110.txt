for(i=0; i< 100; i++){
	db.test.insertOne({'x':i})
}

var cursor = db.test.find()

while(cursor.hasNext()){
	obj=cursor.next()
	print(obj.x)
}

cursor.forEach(function(obj){print(obj.x)})

var cursor = db.users.find()
cursor.forEach(function(obj){print(obj.age)})

var cursor = db.test.find().sort({'x':-1}).limit(10).skip(15)

cursor.forEach(function(obj){print(obj.x)})

------------------------

#indexing
db.test.drop()

for(i=0; i<1000000; i++){
	db.test.insertOne({
		'i':i,
		'username':'user'+i,
		'age' : Math.floor(Math.random()*120),
		'created' : new Date()
	})
}

db.test.find({'username':'user101'}).explain('executionStats')
explain 커서 메소드는 다양한 CRUD작업의 실행정보를 제공한다
executionStats는 인덱스를 이용한 쿼리효과를 이해하도록 도와준다
executionTimeMillis는 실행 시간을 ms로 표현

db.test.createIndex({'username': 1})

db.test.find({'username':'user101'}).explain('executionStats')
executionTimeMillis 0.009초 걸린걸 확인가능
IXSCAN은 index를 이용했다는 것을 알 수 있다

-----------------------------------------

db.test.find({'age' : 74}).explain('executionStats')

#복합 인덱스 : 여러개의 필드에 index를 사용
db.test.find({'username' : 'user101', 'age': 47}).explain('executionStats')
'username'은 index가 있어서 index를 사용

db.test.find({ 'age': 47,'username' : 'user101'}).explain('executionStats') # index를 사용
db.test.createIndex({'age':1,'username':1})

db.test.find({'age' : 21}).sort({'username':-1})
#오라클에서 index는 where조건절에서만 사용한다

db.test.find({'age' : {'$gte':21, '$lte':30}})

db.students.insertOne({
	'id':ObjectId(),
	'student_id':0,
	'scores':[
	{'type':'exam',
	 'score': 38.05000060561},
	{'type':'quiz',
	 'score':79.453154541864},
	{'type':'homework',
	 'score':74.556813235453},
	{'type':'homework',
	 'score':74.683854153154}
	],
	'class_id'	: 127
})

db.students.find({'class_id':127})

db.students.createIndex({'class_id':1})
db.students.find({'student_id':0, 'class_id':127})
db.students.createIndex({'student_id':1,'class_id':1})

db.students.find({'student_id':{'$lt':500000},'class_id':127}).sort({'student_id':1})
#범위가 크면 index효과를 얻을 수 없다
#검사하는 범위가 전체 크기에서 4~5%미만인 경우에만 index를 만들어 사용


-----------------

#idnex가 필요없는 경우
select * from test where i != 3

db.test.find({'i': {'$ne': 3}})
$ne 또는 $not은 컬렉션에 있는 모둔 도큐먼트를 검사해야 하므로 index는 비효율적

db.test.find({'age': 47,'username': {'$gt':'user5'},'username':{'$lt': 'user8'}})
db.test.find({'age': 47,'username': {'$gt':'user5'},'username':{'$lt': 'user8'}}).explain('executionStats')

db.test.find({'username': {'$gt':'user5'},'username':{'$lt': 'user8'},'age':47})
db.test.find({'username': {'$gt':'user5'},'username':{'$lt': 'user8'},'age':47}).explain('executionStats')


db.food.insertOne(
{'_id':ObjectId(), 'apple':1, 'banana':6, 'peach':3}
)
db.food.insertOne(
{'_id':ObjectId(), 'apple':8, 'spinach':4, 'watermelon':4}
)

db.food.find()

db.food.find({'$or':[{'apple':8}, {'banana':6}]})
db.food.find({'apple': 1, 'banana': 6})

db.food.find({'$or':[{'apple':8}, {'banana':6}]}).explain('executionStats')
db.food.find({'$or':[ {'banana':6},{'apple':8}]}).explain('executionStats')


db.food.find({'$or': [{'apple':1}, {'apple':8}]})
db.food.find({'$or': [{'apple':1}, {'apple':8}]}).explain('executionStats')

select * from food where apple in (1, 8)
db.food.find({'apple': {'$in' : [1, 8]}})


db.students.find({'scores.2.score' : 74.556813235453}).explain('executionStats')
#내부 도큐먼트에 index를 만들어줘도 배열의 요소번호를 사용할 경우 index를 사용할 수 있다
#배열의 요소번호는 index에 포함되지 않는다

----------------

#배열 인덱싱
db.students.createIndex({'scores.2.score': 1})
#배열의 요소 2번에 idnex를 만들어줌

db.students.findOne()
#권장하지않음, index를 사용안함


db.students.find({'scores.score' : 79.453154541864}).explain('executionStats')

db.students.find({'scores.2.score' : 74.556813235453}).explain('executionStats')



#배열인덱싱: 배열의 요소번호를 포함하는 index를 만들자
db.students.createIndex({'scores.2.score':1})
#배열의 요소번호 2번에 index를 만들어줌
db.students.find({'scores.2.score' : 74.556813235453}).explain('executionStats')
#index를 사용
db.students.findOne({'scores.3.score':74.683854153154})
db.students.find({'scores.3.score':74.683854153154}).explain('executionStats')




